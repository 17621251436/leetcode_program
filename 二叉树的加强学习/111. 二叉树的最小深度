# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def minDepth(self, root: TreeNode) -> int:






























        # if not root:
        #     return  0
        # queue=collections.deque([(root, )])
        # while queue:
        #
        #     node,depth=queue.popleft()
        #     if not node.left and not node.right:
        #         return depth
        #
        #     if node.left:
        #         queue.append((node.left,depth+1))
        #
        #     if node.right:
        #         queue.append((node.right,depth+1))
        #
        # return 0
        #
        #
        #
        #
        #


























        # if not root:
        #     return 0
        #
        # que = collections.deque([(root, 1)])
        # while que:
        #     node, depth = que.popleft()
        #     if not node.left and not node.right:
        #         return depth
        #     if node.left:
        #         que.append((node.left, depth + 1))
        #     if node.right:
        #         que.append((node.right, depth + 1))
        #
        # return 0