def partition(arr, left, right):
    key = left  # 划分参考数索引,默认为第一个数，可优化
    while left < right:
        while left < right and arr[right] >= arr[key]:
            right -= 1
        while left < right and arr[left] <= arr[key]:
            left += 1
        (arr[left], arr[right]) = (arr[right], arr[left])
    (arr[left], arr[key]) = (arr[key], arr[left])
    return left


def quicksort(arr, left, right):  # 递归调用
    if left >= right:
        return
    mid = partition(arr, left, right)
    quicksort(arr, left, mid - 1)
    quicksort(arr, mid+1, right)
    return arr




def partition(num, low, high):
    pivot = num[low]
    while (low < high):
        while (low < high and num[high] > pivot):
            high -= 1
        while (low < high and num[low] < pivot):
            low += 1
        temp = num[low]
        num[low] = num[high]
        num[high] = temp
    num[low] = pivot
    return low

def find(num,low,high,k):
        index=partition(num,low,high)
        if index==k:return num[index]
        if index<k:
            return find(num,index+1,high,k)
        else:
            return find(num,low,index-1,k)


nums = [2,3,1,5,4,6]

print(find(nums,0,len(nums)-1,0))





def partition(A: int, low: int, high: int) -> int:
    temp = A[low]
    while low < high:
        while low < high and temp >= A[high]:
            high -= 1
        A[low] = A[high]
        while low < high and temp < A[low]:
            low += 1
        A[high] = A[low]
    A[low] = temp
    return low

def quciksort(A: int, low: int, high: int, k: int) -> int:
    if low <= high:
        pos = partition(A, low, high)
        if pos == k - 1:
            return A[pos]
        elif pos > k - 1:
            return quciksort(A, low, pos-1, k)
        elif pos < k - 1:
            return quciksort(A, pos+1, high, k)
    else:
        return -1

A = [-1, 3, -2, 4, -5]
print(quciksort(A, 0, len(A)-1, 5))
