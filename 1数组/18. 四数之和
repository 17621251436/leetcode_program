class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        #内置函数时间复杂度O(nlogn),外部时间复杂O(n^2),因为两层for循环，空间复杂度为O(n)
        res=[]
        nums.sort()
        for i in range(len(nums)):
            if i>0 and nums[i]==nums[i-1]:
                continue

            for j in range(i+1,len(nums)):
                if j>i+1 and nums[j-1]==nums[j]:
                    continue
                left,right=j+1,len(nums)-1
                while left<right:
                    cursum=nums[i]+nums[j]+nums[left]+nums[right]
                          if currSum == target:
                        result.append([nums[i], nums[j], nums[left], nums[right]])
                        while left < right and nums[left] == nums[left + 1]:
                            left += 1
                        while left < right and nums[right] == nums[right - 1]:
                            right -= 1
                        left += 1
                        right -= 1
                    elif currSum < target:
                        left += 1
                    else:
                        right -= 1
        return result 
            


