class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        if not matrix:
            return []
        res=[]
        l,r=0,len(matrix[0])-1
        t,b=0,len(matrix)-1
        while True:
            for i in range(l,r+1):
                res.append(matrix[t][i])
            t+=1
            if t>b:break
            for j in range(t,b+1):
                res.append(matrix[j][r])
            r-=1
            if l>r: break
            for i in range(r,l-1,-1):
                res.append(matrix[b][i])
            b-=1
            if t>b: break
            for i in range(b,t-1,-1):
                res.append(matrix[i][l])
            l+=1
            if l>r: break
        return res









class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        if obstacleGrid[0][0]:
            return 0
        m=len(obstacleGrid)
        n=len(obstacleGrid[0])
        dp=[[0 for _ in range(n+1)] for _ in range(m+1)]
        for i in range(1,m+1):
            for j in range(1,n+1):
                if i==1 and j==1:
                    continue
                if obstacleGrid[i-1][j-1]:
                    dp[i][j]=0
                else:
                    dp[i][j]=dp[i-1][j]+dp[i][j-1]
        return dp[-1][-1]
