class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        ans = 0

        def dfs(grid, i, j):
            if not 0 <= i < m or not 0 <= j < n or grid[i][j] == 0:
                return 0
            grid[i][j] = 0
            left = dfs(grid, i, j - 1)
            right = dfs(grid, i, j + 1)
            top = dfs(grid, i - 1, j)
            bottom = dfs(grid, i + 1, j)
            return 1 + sum([left, right, top, bottom])

        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    ans = max(ans, dfs(grid, i, j))
        return ans

        # m = len(grid)
        # if m == 0: return 0
        # n = len(grid[0])
        # ans = 0
        # def dfs(i, j):
        #     if i < 0 or i >= m or j < 0 or j >= n: return 0
        #     if grid[i][j] == 0: return 0
        #     grid[i][j] = 0
        #     top = dfs(i + 1, j)
        #     bottom = dfs(i - 1, j)
        #     left = dfs(i, j - 1)
        #     right = dfs(i, j + 1)
        #     return 1 + sum([top, bottom, left, right])
        # for i in range(m):
        #     for j in range(n):
        #         ans = max(ans, dfs(i, j))
        # return ans